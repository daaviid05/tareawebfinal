Aquí tienes el archivo “ejercicio3final” completamente editado, con explicaciones claras, resaltados y los ejercicios resueltos. Todo está explicado para que sea fácil de entender y visualmente llamativo:

 Ejercicio 3: Conflictos en Git
 3.1. Preguntas

 ¿Qué es un conflicto? ¿Cuándo ocurre? ¿Es bueno o malo?
Un conflicto** en Git es una situación que ocurre cuando **dos o más ramas han modificado las mismas líneas de un archivo** o archivos que se solapan, y **Git no puede decidir automáticamente qué versión conservar**.  
- Los conflictos ocurren generalmente durante un **merge** o un rebase.  
- No son ni “buenos” ni “malos”, sino una consecuencia natural del trabajo colaborativo. Sin embargo, **es importante resolverlos correctamente** para mantener la integridad del proyecto.


¿Se puede evitar un conflicto? ¿Cómo?
Algunos conflictos se pueden evitar si:
- Hay buena comunicación** entre colaboradores.
- Se actualiza frecuentemente la rama local con los cambios de la rama principal (git pull o git fetch seguido de `merge o rebase).
- Se divide el trabajo en archivos o líneas diferentes para disminuir la posibilidad de solapamiento.
- Se hacen **commits pequeños y frecuentes.



 3.2. Ejercicio Práctico

A continuación, se muestran los pasos realizados y los comandos utilizados para provocar y resolver un conflicto en Git:

1. Creé el archivo 3.conflicts/daaviid05.txt para registrar este ejercicio.

2. Creé una rama llamada suprema a partir de master:
   bash
   git checkout master
   git checkout -b suprema
  

3. Me moví a la rama suprema.

4. En 3.conflicts/milanesa.txt` cambié la palabra lomo por pollo:
   - Antes: lomo
   - Después: pollo

5. Realicé el commit con el mensaje "Cambio de lomo a pollo":
   bash
   git add 3.conflicts/milanesa.txt
   git commit -m "Cambio de lomo a pollo"
   

6. Me moví a la rama `master` y creé una rama llamada bife:
   bash
   git checkout master
   git checkout -b bife
  

7. Me moví a bife y cambié en el mismo archivo la palabra lomo por bife:
   - Antes: lomo
   - Después: bife
   bash
   git add 3.conflicts/milanesa.txt
   git commit -m "Cambio de lomo a bife"
   
Resultados de los comandos:

-git diff master suprema 
  > La diferencia principal es que en la rama `suprema` la palabra lomo fue reemplazada por pollo.

-git diff master bife 
  > En la rama bife la palabra lomo fue reemplazada por bife.

-git status desde master  
  > No había cambios pendientes; el working tree estaba limpio.

-git merge bife 
  > La fusión se realizó correctamente porque master y bife no tenían cambios conflictivos en ese momento.

-git merge suprema 
  > Aquí ocurrió el conflicto porque tanto `bife` como `suprema` modificaron la **misma línea** en `3.conflicts/milanesa.txt` pero con valores distintos.

-git status 
  > Indicó que había un **conflicto de fusión** en `3.conflicts/milanesa.txt` y que debía resolverse manualmente.

Contenido de 3.conflicts/milanesa.txt durante el conflicto:
diff
<<<<<<< HEAD
bife
pollo
>>>>>>> suprema
```
Esto indica que hay que elegir entre **bife** y pollo, o combinar ambos cambios según lo que se quiera.

---

-Aborté el merge con `git merge --abort 
  > El repositorio volvió al estado anterior al intento de fusión.

- Volví a ejecutar git merge suprema y resolví el conflicto manualmente: 
  Edité el archivo para dejar la versión deseada (por ejemplo, “bife con pollo”), guardé los cambios y finalicé la fusión con:
  bash
  git add 3.conflicts/milanesa.txt
  git commit

Nota final
Para restaurar milanesa.txt a su estado original, busca el commit original y ejecuta:
bash
git checkout [commit ID] -- 3.conflicts/milanesa.txt

¿Necesitas que te explique algún paso con más detalle o que resuelva otro ejercicio?
